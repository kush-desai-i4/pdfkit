// Generated by CoffeeScript 1.12.7

/*
PDFEmbeddedFiles - handles embedded files representation in the PDF document
 */

(function() {
  var PDFEmbeddedFiles, utf8;

  utf8 = require('utf8');

  PDFEmbeddedFiles = (function() {
    function PDFEmbeddedFiles(document, embeddedFiles) {
      var embeddedFile, key, ref1, streamRef;
      this.document = document;
      this.embeddedFiles = embeddedFiles;
      ref1 = this.embeddedFiles;
      for (key in ref1) {
        embeddedFile = ref1[key];
        streamRef = this.streamRef(embeddedFile);
        this.embeddedFiles[key]._fileRef = this.fileRef(embeddedFile, streamRef);
      }
    }

    PDFEmbeddedFiles.prototype.streamRef = function(embeddedFile) {
      var ref;
      ref = this.document.ref({
        Type: 'EmbeddedFile',
        Subtype: embeddedFile.mime,
        Params: {
          ModDate: embeddedFile.updatedAt
        }
      });
      ref.write(utf8.encode(embeddedFile.content));
      return ref;
    };

    PDFEmbeddedFiles.prototype.fileRef = function(embeddedFile, streamRef) {
      var ref1;
      return this.document.ref({
        F: new String(embeddedFile.name),
        UF: new String(utf8.encode(embeddedFile.name)),
        Desc: new String(embeddedFile.description),
        Type: 'Filespec',
        AFRelationship: (ref1 = embeddedFile.AFRelationship) != null ? ref1 : '',
        EF: {
          F: streamRef,
          UF: streamRef
        }
      });
    };

    PDFEmbeddedFiles.prototype.names = function() {
      return {
        Names: this.embeddedFiles.map(function(embeddedFile) {
          return embeddedFile._fileRef.namedReference(embeddedFile.name);
        })
      };
    };

    PDFEmbeddedFiles.prototype.associatedFiles = function() {
      return this.document.ref(this.embeddedFiles.map(function(embeddedFile) {
        return embeddedFile._fileRef;
      }));
    };

    PDFEmbeddedFiles.prototype.end = function() {
      var embeddedFile, i, len, ref1, results;
      ref1 = this.embeddedFiles;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        embeddedFile = ref1[i];
        embeddedFile._fileRef.data.EF.F.end();
        results.push(embeddedFile._fileRef.end());
      }
      return results;
    };

    return PDFEmbeddedFiles;

  })();

  module.exports = PDFEmbeddedFiles;

}).call(this);
